//Driver Code
package meanmax; 
 
import org.apache.hadoop.conf.Configuration; 
import org.apache.hadoop.fs.Path; 
 
import org.apache.hadoop.io.IntWritable; 
import org.apache.hadoop.io.Text; 
 
import org.apache.hadoop.mapreduce.Job; 
 
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat; 
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat; 
 
public class MeanMaxDriver { 
 
    public static void main(String[] args) throws Exception { 
 
        if (args.length != 2) { 
            System.err.println("Please enter both input and output parameters."); 
            System.exit(-1); 
        } 
 
        Configuration conf = new Configuration(); 
        Job job = Job.getInstance(conf, "Mean and Max Temperature"); 
 
        job.setJarByClass(MeanMaxDriver.class); 
 
        FileInputFormat.addInputPath(job, new Path(args[0])); 
        FileOutputFormat.setOutputPath(job, new Path(args[1])); 
 
        job.setMapperClass(MeanMaxMapper.class); 
        job.setReducerClass(MeanMaxReducer.class); 
 
        job.setOutputKeyClass(Text.class); 
        job.setOutputValueClass(IntWritable.class); 
 
        System.exit(job.waitForCompletion(true) ? 0 : 1); 
    } 
} 

//Mapper Code
 
import java.io.IOException; 
 
import org.apache.hadoop.io.IntWritable; 
import org.apache.hadoop.io.LongWritable; 
import org.apache.hadoop.io.Text; 
 
import org.apache.hadoop.mapreduce.Mapper; 
 
public class MeanMaxMapper extends Mapper<LongWritable, Text, Text, IntWritable> { 
 
    public static final int MISSING = 9999; 
 
    @Override 
    public void map(LongWritable key, Text value, Context context) 
            throws IOException, InterruptedException { 
 
        String line = value.toString();
  // Extract month from positions 19-20 
        String month = line.substring(19, 21); 
        int temperature; 
 
        // Extract temperature considering optional '+' 
        if (line.charAt(87) == '+') { 
            temperature = Integer.parseInt(line.substring(88, 92)); 
        } else { 
            temperature = Integer.parseInt(line.substring(87, 92)); 
        } 
 
        // Quality check 
        String quality = line.substring(92, 93); 
 
        if (temperature != MISSING && quality.matches("[01459]")) { 
            context.write(new Text(month), new IntWritable(temperature)); 
        } 
    } 
} 

//Reducer Code
package meanmax; 
 
import java.io.IOException; 
 
import org.apache.hadoop.io.IntWritable; 
import org.apache.hadoop.io.Text; 
import org.apache.hadoop.mapreduce.Reducer; 
 
public class MeanMaxReducer extends Reducer<Text, IntWritable, Text, Text> { 
 
    @Override 
    public void reduce(Text key, Iterable<IntWritable> values, 
                       Context context) throws IOException, InterruptedException { 
 
        int sumTemp = 0; 
        int count = 0; 
        int maxTemp = Integer.MIN_VALUE; 
 
        for (IntWritable value : values) { 
            int temp = value.get(); 
            sumTemp += temp; 
            count++; 
 
            if (temp > maxTemp) { 
                maxTemp = temp; 
            } 
        } 
 
        if (count > 0) { 
            int avgTemp = sumTemp / count; 
            String result = "mean=" + avgTemp + " max=" + maxTemp; 
            context.write(key, new Text(result)); 
        } 
    } 
} 
